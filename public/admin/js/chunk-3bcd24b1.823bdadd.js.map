{"version":3,"sources":["webpack:///./src/interfaces/interface-types/input.vue?6d71","webpack:///src/interfaces/interface-types/input.vue","webpack:///./src/interfaces/interface-types/input.vue?7b7e","webpack:///./src/interfaces/interface-types/input.vue","webpack:///./node_modules/@directus/extension-toolkit/mixins/interface.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","value","on","$event","$emit","_l","type","key","_v","_s","staticRenderFns","name","mixins","watch","interfaceName","selectFirst","computed","interfaceNameField","values","availableTypes","created","methods","undefined","length","component","module","exports","props","id","String","required","default","Number","readonly","Boolean","collection","options","Object","newItem","relation","fields"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,kBAAkB,CAACE,MAAM,CAAC,MAAQN,EAAIO,OAAOC,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOT,EAAIU,MAAM,QAASD,MAAWT,EAAIW,GAAIX,EAAkB,gBAAE,SAASY,GAAM,OAAOR,EAAG,SAAS,CAACS,IAAID,GAAM,CAACZ,EAAIc,GAAGd,EAAIe,GAAGH,SAAW,IACjTI,EAAkB,G,yoBCStB,OACEC,KAAM,iBACNC,OAAQ,CAAC,EAAX,GACEC,MAAO,CACLC,cADJ,WAEMnB,KAAKoB,gBAGTC,SAAU,EAAZ,GACA,gBACI,WAAJ,YAAM,OAAN,2BAFA,CAIIF,cAJJ,WAKM,IAAN,8BACM,GAAKG,EACL,OAAOtB,KAAKuB,OAAOD,IAErBE,eATJ,WASA,MACM,OAAN,6EAGEC,QArBF,WAsBIzB,KAAKoB,eAEPM,QAAS,CACPN,YADJ,gBAEkCO,IAAxB3B,KAAKwB,gBAA+D,IAA/BxB,KAAKwB,eAAeI,QAE7D5B,KAAKS,MAAM,QAAST,KAAKwB,eAAe,OCtCgT,I,YCO1VK,EAAY,eACd,EACA/B,EACAiB,GACA,EACA,KACA,KACA,MAIa,aAAAc,E,8BClBfC,EAAOC,QAAU,CACfC,MAAO,CAILC,GAAI,CACFtB,KAAMuB,OACNC,UAAU,GAGZnB,KAAM,CACJL,KAAMuB,OACNC,UAAU,GAIZ7B,MAAO,CACLK,KAAM,KACNyB,QAAS,MAGXzB,KAAM,CACJA,KAAMuB,OACNC,UAAU,GAGZP,OAAQ,CACNjB,KAAM,CAACuB,OAAQG,QACfD,QAAS,MAGXE,SAAU,CACR3B,KAAM4B,QACNH,SAAS,GAGXI,WAAY,CACV7B,KAAMuB,OACNE,QAAS,MAGXD,SAAU,CACRxB,KAAM4B,QACNH,SAAS,GAGXK,QAAS,CACP9B,KAAM+B,OACNN,QAAS,KAAM,KAGjBO,QAAS,CACPhC,KAAM4B,QACNH,SAAS,GAIXQ,SAAU,CACRjC,KAAM+B,OACNN,QAAS,MAGXS,OAAQ,CACNlC,KAAM+B,OACNN,QAAS,MAIXb,OAAQ,CACNZ,KAAM+B,OACNN,QAAS","file":"js/chunk-3bcd24b1.823bdadd.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-simple-select',{attrs:{\"value\":_vm.value},on:{\"input\":function($event){return _vm.$emit('input', $event)}}},_vm._l((_vm.availableTypes),function(type){return _c('option',{key:type},[_vm._v(_vm._s(type))])}),0)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <v-simple-select :value=\"value\" @input=\"$emit('input', $event)\">\n    <option v-for=\"type in availableTypes\" :key=\"type\">{{ type }}</option>\n  </v-simple-select>\n</template>\n\n<script>\nimport mixin from \"@directus/extension-toolkit/mixins/interface\";\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"InterfaceTypes\",\n  mixins: [mixin],\n  watch: {\n    interfaceName() {\n      this.selectFirst();\n    }\n  },\n  computed: {\n    ...mapState({\n      interfaces: state => state.extensions.interfaces\n    }),\n    interfaceName() {\n      const interfaceNameField = this.options.interfaceField;\n      if (!interfaceNameField) return;\n      return this.values[interfaceNameField];\n    },\n    availableTypes() {\n      return this.interfaces[this.interfaceName]?.types;\n    }\n  },\n  created() {\n    this.selectFirst();\n  },\n  methods: {\n    selectFirst() {\n      if (this.availableTypes === undefined || this.availableTypes.length === 0) return;\n\n      this.$emit(\"input\", this.availableTypes[0]);\n    }\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./input.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./input.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./input.vue?vue&type=template&id=2562f14b&\"\nimport script from \"./input.vue?vue&type=script&lang=js&\"\nexport * from \"./input.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // Name of the collection\n    collection: {\n      type: String,\n      default: null\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    }\n  }\n};\n"],"sourceRoot":""}